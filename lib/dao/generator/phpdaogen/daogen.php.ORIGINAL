<?php
// daogen.php
// Copyright (c) 2010 Ronald B. Cemer
// All rights reserved.
// This software is released under the BSD license.
// Please see the accompanying LICENSE.txt for details.

if (!class_exists('Connection', true)) include(dirname(__FILE__).'/Connection.class.php');
if (!class_exists('MySQLConnection', true)) include(dirname(__FILE__).'/MySQLConnection.class.php');
if (!class_exists('PreparedStatement', true)) include(dirname(__FILE__).'/PreparedStatement.class.php');

$GENERATED_HEADER =
"// Generated automatically by daogen.\n".
"// Do NOT edit this file.\n".
"// Any changes made to this file will be overwritten the next time it is generated.\n".
"\n";

function usage() {
	fprintf(
		STDERR,
		"Please specify database server, username, password, database and output directory.\n"
	);
}

function connect() {
	global $dbServer, $dbUsername, $dbPassword, $dbDatabase;

	return new MySQLConnection($dbServer, $dbUsername, $dbPassword, $dbDatabase);
}

function getTableList_MySQL() {
	global $dbDatabase;

	$db = connect();
	$ps = new PreparedStatement('show tables');
	$tableRows = $db->fetchAllObjects($db->executeQuery($ps), true);
	$db->close();

	$tncol = 'Tables_in_'.$dbDatabase;
	$tableNames = array();
	for ($i = 0; $i < count($tableRows); $i++) $tableNames[] = $tableRows[$i]->$tncol;
	return $tableNames;
}

function getTableList() {
	return getTableList_MySQL();
}

function getPrimaryKey_MySQL($tableName) {
	$db = connect();
	$ps = new PreparedStatement('desc '.$tableName);
	$tableCols = $db->fetchAllObjects($db->executeQuery($ps), true);
	$db->close();

	$primaryKey = array();
	foreach ($tableCols as $tc) {
		if (strcasecmp($tc->Key, 'PRI') == 0) $primaryKey[] = $tc->Field;
	}
	return $primaryKey;
}

function getPrimaryKey($tableName) {
	return getPrimaryKey_MySQL($tableName);
}

function getFields_MySQL($tableName) {
	$db = connect();
	$ps = new PreparedStatement('desc '.$tableName);
	$tableCols = $db->fetchAllObjects($db->executeQuery($ps), true);
	$db->close();

	$cols = array();
	for ($i = 0; $i < count($tableCols); $i++) {
		$tp = $tableCols[$i]->Type;
		$dataType = '';
		if ((strncasecmp($tp, 'int', 3) == 0) ||
			(strncasecmp($tp, 'tinyint', 7) == 0) ||
			(strncasecmp($tp, 'smallint', 8) == 0) ||
			(strncasecmp($tp, 'mediumint', 9) == 0) ||
			(strncasecmp($tp, 'bigint', 6) == 0)) {
			$dataType = 'int';
		}
		if ((strncasecmp($tp, 'dec', 3) == 0) ||
			(strncasecmp($tp, 'numeric', 7) == 0) ||
			(strncasecmp($tp, 'float', 5) == 0) ||
			(strncasecmp($tp, 'double', 6) == 0) ||
			(strncasecmp($tp, 'real', 4) == 0)) {
			$dataType = 'double';
		}
		if ((strncasecmp($tp, 'date', 4) == 0) ||
			(strncasecmp($tp, 'time', 4) == 0) ||
			(strncasecmp($tp, 'year', 4) == 0)) {
			$dataType = 'string';
		}
		if ((strncasecmp($tp, 'char', 4) == 0) ||
			(strncasecmp($tp, 'varchar', 4) == 0) ||
			(strncasecmp($tp, 'binary', 6) == 0) ||
			(strncasecmp($tp, 'varbinary', 9) == 0) ||
			(strncasecmp($tp, 'blob', 4) == 0) ||
			(strncasecmp($tp, 'tinyblob', 8) == 0) ||
			(strncasecmp($tp, 'mediumblob', 10) == 0) ||
			(strncasecmp($tp, 'longblob', 8) == 0) ||
			(strncasecmp($tp, 'text', 4) == 0) ||
			(strncasecmp($tp, 'tinytext', 8) == 0) ||
			(strncasecmp($tp, 'mediumtext', 10) == 0) ||
			(strncasecmp($tp, 'longtext', 8) == 0)) {
			$dataType = 'string';
		}
		$col = new stdClass();
		$col->name = $tableCols[$i]->Field;
		$col->dataType = $dataType;
		if (strcasecmp($tableCols[$i]->Default, 'NULL') == 0) {
			$col->defaultValue = null;
		} else {
			$col->defaultValue = $tableCols[$i]->Default;
		}
		if (stripos($tableCols[$i]->Extra, 'auto_increment') !== false) {
			$col->autoIncrement = true;
		} else {
			$col->autoIncrement = false;
		}
		$cols[] = $col;
	}
	return $cols;
}

function getFields($tableName) {
	return getFields_MySQL($tableName);
}

function getPHPEncodedDefaultValue(&$field) {
	if ($field->defaultValue === null) return 'null';
	if ($field->dataType == 'string') return '"'.phpencode($field->defaultValue).'"';
	return $val = $field->defaultValue;
}

function outputValueObject($tableName, $fields, $primaryKey) {
	global $outputDir, $GENERATED_HEADER;

	$uTableName = ucwords($tableName);

	// Open the class.
	$code = "<?php\n";
	$code .= $GENERATED_HEADER;
	$code .= "class $uTableName {\n";

	// Emit member variables.
	foreach ($fields as $field) {
		$code .= "\tpublic \${$field->name};\n";
	}
	$code .= "\n";

	// defaultAllFields function
	$code .= "\tpublic function defaultAllFields() {\n";
	foreach ($fields as $field) {
		if ($field->defaultValue === null) {
			$val = 'null';
		} else if ($field->dataType == 'string') {
			$val = '"'.phpencode($field->defaultValue).'"';
		} else {
			$val = $field->defaultValue;
		}
		$code .= "\t\t".'$this->'.$field->name.' = '.getPHPEncodedDefaultValue($field).";\n";
	}
	$code .= "\t}\n\n";

	// loadFromArray function
	$code .= "\tpublic function loadFromArray(\$arr) {\n";
	foreach ($fields as $field) {
		$code .= "\t\t".'$this->'.$field->name.' = isset($arr[\''.$field->name.'\']) ? ('.
			$field->dataType.')$arr[\''.$field->name.'\'] : '.getPHPEncodedDefaultValue($field).
			';'."\n";
	}
	$code .= "\t\treturn \$this;\n";
	$code .= "\t}\n";

	// Close the class and write out the php file.
	$code .= "}\n";
	file_put_contents("$outputDir/$uTableName.class.php", $code);
}

function outputDataAccessObject($tableName, $fields, $primaryKey) {
	global $outputDir, $GENERATED_HEADER;

	$uTableName = ucwords($tableName);

	// Open the class.
	$code = "<?php\n";
	$code .= $GENERATED_HEADER;
	$code .= "if (!class_exists('$uTableName')) include dirname(__FILE__).'/$uTableName.class.php';\n\n";
	$code .= "class $uTableName"."DAO {\n";
	$code .= "\tpublic static \$ALLOWED_QUERY_OPERATORS = array('=', '<', '<=', '>', '>=', 'beginsWith', 'contains', 'endsWith');\n";
	$code .= "\tpublic static \$ALLOWED_NUMERIC_QUERY_OPERATORS = array('=', '<', '<=', '>', '>=');\n";
	$code .= "\tpublic static \$ALLOWED_STRING_QUERY_OPERATORS = array('=', '<', '<=', '>', '>=', 'beginsWith', 'contains', 'endsWith');\n";

	// Emit member variables.
	$code .= "\tprotected \$connection;\n\n";

	$code .= "\tpublic function $uTableName"."DAO(".'$connection'.") {\n";
	$code .= "\t\t".'$this->connection = $connection;'."\n";
	$code .= "\t}\n\n";

	// insert function
	$code .= "\tpublic function insert(\$$tableName) {\n";
	$code .= "\t\t".'$ps = new PreparedStatement("insert into '.$tableName.' (';
	$sep = '';
	foreach ($fields as $field) {
		if (!$field->autoIncrement) {
			$code .= $sep.$field->name;
			if ($sep == '') $sep = ', ';
		}
	}
	$code .= ') values (';
	$sep = '';
	foreach ($fields as $field) {
		if (!$field->autoIncrement) {
			$code .= $sep.'?';
			if ($sep == '') $sep = ', ';
		}
	}
	$code .= ")\");\n";
	foreach ($fields as $field) {
		if (!$field->autoIncrement) {
			$code .= "\t\t".'$ps->set'.ucwords($field->dataType).'($'.$tableName.'->'.$field->name.");\n";
		}
	}
	$code .= "\t\t".'$this->connection->executeUpdate($ps);'."\n";
	foreach ($fields as $field) {
		if ($field->autoIncrement) {
			$code .= "\t\t".'$'.$tableName.'->'.$field->name.' = $this->connection->getLastInsertId();'."\n";
		}
	}
	$code .= "\t}\n\n";

	// update function
	$code .= "\tpublic function update(\$$tableName) {\n";
	$code .= "\t\t".'$ps = new PreparedStatement("update '.$tableName.' set ';
	$sep = '';
	foreach ($fields as $field) {
		if (!in_array($field->name, $primaryKey)) {
			$code .= $sep.$field->name.' = ?';
			if ($sep == '') $sep = ', ';
		}
	}
	$whereAnd = ' where ';
	foreach ($fields as $field) {
		if (in_array($field->name, $primaryKey)) {
			$code .= $whereAnd.$field->name.' = ?';
			$whereAnd = ' and ';
		}
	}
	$code .= "\");\n";
	foreach ($fields as $field) {
		if (!in_array($field->name, $primaryKey)) {
			$code .= "\t\t".'$ps->set'.ucwords($field->dataType).'($'.$tableName.'->'.$field->name.");\n";
		}
	}
	foreach ($fields as $field) {
		if (in_array($field->name, $primaryKey)) {
			$code .= "\t\t".'$ps->set'.ucwords($field->dataType).'($'.$tableName.'->'.$field->name.");\n";
		}
	}
	$code .= "\t\t".'$this->connection->executeUpdate($ps);'."\n";
	$code .= "\t}\n\n";

	// delete function
	$code .= "\tpublic function delete(";
	$sep = '';
	foreach ($primaryKey as $fn) {
		$code .= $sep.'$'.$fn;
		if ($sep == '') $sep = ', ';
	}
	$code .= ") {\n";
	$code .= "\t\t".'$ps = new PreparedStatement("delete from '.$tableName;
	$whereAnd = ' where ';
	foreach ($fields as $field) {
		if (in_array($field->name, $primaryKey)) {
			$code .= $whereAnd.$field->name.' = ?';
			$whereAnd = ' and ';
		}
	}
	$code .= "\");\n";
	foreach ($fields as $field) {
		if (in_array($field->name, $primaryKey)) {
			$code .= "\t\t".'$ps->set'.ucwords($field->dataType).'($'.$field->name.");\n";
		}
	}
	$code .= "\t\t".'$this->connection->executeUpdate($ps);'."\n";
	$code .= "\t}\n\n";

	// load function
	$code .= "\tpublic function load(";
	$sep = '';
	foreach ($primaryKey as $fn) {
		$code .= $sep.'$'.$fn;
		if ($sep == '') $sep = ', ';
	}
	$code .= ") {\n";
	$code .= "\t\t".'$ps = new PreparedStatement("select * from '.$tableName;
	$whereAnd = ' where ';
	foreach ($fields as $field) {
		if (in_array($field->name, $primaryKey)) {
			$code .= $whereAnd.$field->name.' = ?';
			$whereAnd = ' and ';
		}
	}
	$code .= "\");\n";
	foreach ($fields as $field) {
		if (in_array($field->name, $primaryKey)) {
			$code .= "\t\t".'$ps->set'.ucwords($field->dataType).'($'.$field->name.");\n";
		}
	}
	$code .= "\t\t".'$arr = $this->connection->fetchArray($this->connection->executeQuery($ps), true);'."\n";
	$code .= "\t\t".'if ($arr === false) return false;'."\n";
	$code .= "\t\t\$$tableName = new $uTableName();\n";
	$code .= "\t\t\$${tableName}->loadFromArray(\$arr);\n";
	$code .= "\t\treturn \$$tableName;\n";
	$code .= "\t}\n\n";

	// finder functions for each field
	for ($finderi = 0; $finderi < count($fields); $finderi++) {
		$finderField = $fields[$finderi];

		// findBy<name>PS function.
		$code .= "\tpublic function findBy".ucwords($finderField->name).
			'PS($'.$finderField->name.", \$queryOperator = '=', \$orderBy = null, \$offset = 0, \$limit = 0) {\n";
		if ($finderField->dataType == 'string') {
			$oplist = $uTableName.'DAO::$ALLOWED_STRING_QUERY_OPERATORS';
			$sqlqoname = '$sqlQueryOperator';
		} else {
			$oplist = $uTableName.'DAO::$ALLOWED_NUMERIC_QUERY_OPERATORS';
			$sqlqoname = '$queryOperator';
		}
		$code .= "\t\tif (!in_array(\$queryOperator, $oplist)) \$queryOperator = $oplist"."[0];\n";
		if ($finderField->dataType == 'string') {
			$code .= "\t\t\$sqlQueryOperator = ((\$queryOperator == 'beginsWith') || (\$queryOperator == 'endsWith') || (\$queryOperator == 'contains')) ? 'like' : \$queryOperator;\n";
		}
		$code .= "\t\t".'$ps = new PreparedStatement("select * from '.
			$tableName.' where '.$finderField->name.
			" $sqlqoname ?\".(((\$orderBy!==null)&&(\$orderBy!='')) ? (' order by '.\$orderBy) : ''), ".
			"\$offset, \$limit);\n";
		if ($finderField->dataType == 'string') {
			$code .= "\t\tif (\$queryOperator == 'beginsWith') {\n";
			$code .= "\t\t\t".'$ps->set'.ucwords($finderField->dataType).'($'.$finderField->name.".'%');\n";
			$code .= "\t\t} else if (\$queryOperator == 'endsWith') {\n";
			$code .= "\t\t\t".'$ps->set'.ucwords($finderField->dataType).'(\'%\'.$'.$finderField->name.");\n";
			$code .= "\t\t} else if (\$queryOperator == 'contains') {\n";
			$code .= "\t\t\t".'$ps->set'.ucwords($finderField->dataType).'(\'%\'.$'.$finderField->name.".'%');\n";
			$code .= "\t\t} else {\n";
			$code .= "\t\t\t".'$ps->set'.ucwords($finderField->dataType).'($'.$finderField->name.");\n";
			$code .= "\t\t}\n";
		} else {
			$code .= "\t\t".'$ps->set'.ucwords($finderField->dataType).'($'.$finderField->name.");\n";
		}
		$code .= "\t\treturn \$ps;\n";
		$code .= "\t}\n\n";

		// findBy<name> function.
		$code .= "\tpublic function findBy".ucwords($finderField->name).
			'($'.$finderField->name.", \$queryOperator = '=', \$orderBy = null, \$offset = 0, \$limit = 0) {\n";
		$code .= "\t\treturn \$this->findWithPreparedStatement(\$this->findBy".
			ucwords($finderField->name).'PS($'.$finderField->name.
			", \$queryOperator, \$orderBy, \$offset, \$limit));\n";
		$code .= "\t}\n\n";
	}

	// findAllPS function.
	$code .= "\tpublic function findAllPS".
		"(\$orderBy = null, \$offset = 0, \$limit = 0) {\n";
	$code .= "\t\t".'$ps = new PreparedStatement("select * from '.
		$tableName.
		"\".(((\$orderBy!==null)&&(\$orderBy!='')) ? (' order by '.\$orderBy) : ''), ".
		"\$offset, \$limit);\n";
	$code .= "\t\treturn \$ps;\n";
	$code .= "\t}\n\n";

	// findAll function.
	$code .= "\tpublic function findAll".
		"(\$orderBy = null, \$offset = 0, \$limit = 0) {\n";
		$code .= "\t\treturn \$this->findWithPreparedStatement(\$this->findAllPS".
			"(\$orderBy, \$offset, \$limit));\n";
		$code .= "\t}\n\n";

	$code .= "\tpublic function findWithPreparedStatement".
		"(\$ps) {\n";
	$code .= "\t\t".'return '.$uTableName.'DAO::loadAllFromResultSet($this->connection, $this->connection->executeQuery($ps), true);'."\n";
	$code .= "\t}\n\n";

	// loadAllFromResultSet function
	$code .= "\tpublic static function loadAllFromResultSet(\$connection, \$rs, \$freeResultBeforeReturn = false) {\n";
	$code .= "\t\t\$rows = array();\n";
	$code .= "\t\twhile (\$arr = \$connection->fetchArray(\$rs)) {\n";
	$code .= "\t\t\t\$$tableName = new $uTableName();\n";
	$code .= "\t\t\t\$${tableName}->loadFromArray(\$arr);\n";
	$code .= "\t\t\t\$rows[] = \$$tableName;\n";
	$code .= "\t\t}\n";
	$code .= "\t\tif (\$freeResultBeforeReturn) \$connection->freeResult(\$rs);\n";
	$code .= "\t\treturn \$rows;\n";
	$code .= "\t}\n";

	// Close the class and write out the php file.
	$code .= "}\n";
	file_put_contents("$outputDir/$uTableName"."DAO.class.php", $code);
}

function processTable($tableName) {
	echo "Processing $tableName...\n";

	$primaryKey = getPrimaryKey($tableName);
	if (count($primaryKey) == 0) {
		fprintf(STDERR, "Can't find primary key for %s; not processing.\n", $tableName);
		return;
	}
///print_r($primaryKey);

	$fields = getFields($tableName);
///print_r($fields);

	outputValueObject($tableName, $fields, $primaryKey);

	outputDataAccessObject($tableName, $fields, $primaryKey);
}

// This must ONLY be used with strings which will be enclosed in double-quotes ("...").
function phpencode($s) {
	$ss = '';
	for ($i = 0; $i < strlen($s); $i++) {
		$c = $s[$i];
		$co = ord($c);
		if (($co >= 0x20) && ($co <= 0x7e)) {
			$ss .= $c;
			continue;
		}
		switch ($c) {
		case "\n": $ss .= "\\n"; break;
		case "\r": $ss .= "\\r"; break;
		case "\t": $ss .= "\\t"; break;
		case "\v": $ss .= "\\v"; break;
		case "\f": $ss .= "\\f"; break;
		case "\\": $ss .= "\\\\"; break;
		case "\$": $ss .= "\\\$"; break;
		case "\"": $ss .= "\\\""; break;
		default:
			$hex = dechex($co);
			while (strlen($hex) < 2) $hex = '0'.$hex;
			$ss .= "\\x".$hex;
		}
	}
	return $ss;
}

if ($argc != 6) {
	usage();
	exit(1);
}

$dbServer = $argv[1];
$dbUsername = $argv[2];
$dbPassword = $argv[3];
$dbDatabase = $argv[4];
$outputDir = $argv[5];

$scriptDir = dirname($argv[0]);

@mkdir($outputDir, 0755, true);

foreach (glob($scriptDir.'/*.class.php') as $srcFile) {
	copy(dirname(__FILE__).'/'.$srcFile, $outputDir.'/'.$srcFile);
	//copy($srcFile, $outputDir.'/'.$srcFile);
}

$tableNames = getTableList();
for ($i = 0; $i < count($tableNames); $i++) {
	processTable($tableNames[$i]);
}
